api:
  enabled: true
  graphql: true
  playground: true
  address: 0.0.0.0:8686

sources:
  from-log-file:
    type: file
    include:
      - /var/log/observability-app/*.log
  from-metrics-prometheus-endpoint:
    type: prometheus_scrape
    endpoints:
      - "${OBSERVABILITY_APP_PROMETHEUS_SCRAPPING_URL}"
  from-otlp:
    type: opentelemetry
    grpc:
      address: 0.0.0.0:4317
    http:
      address: 0.0.0.0:4318
      keepalive:
        max_connection_age_jitter_factor: 0.1
        max_connection_age_secs: 300
  from-postgresql:
    type: postgresql_metrics
    endpoints:
      - postgresql://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@persons-db:5432/persons

transforms:
  json-parser:
    type: remap
    inputs:
      - from-log-file
    source: |
      # The "file" source generates a JSON payload whose message is the initial log event (https://vector.dev/docs/reference/configuration/sources/file/#examples).
      # The "!" means that the script should abort on error.
      . = parse_json!(string!(.message))
      del(.sequence)
      .vector_1 = "${HOSTNAME}"


sinks:
  to-console:
    inputs:
      - json-parser
    type: console
    encoding:
      codec: json
  to-metrics-prometheus-endpoint:
    type: prometheus_exporter
    inputs:
      - from-metrics-prometheus-endpoint
      - from-postgresql
    address: 0.0.0.0:9598
  to-loki:
    type: loki
    inputs:
      - json-parser
    endpoint: "${LOKI_SERVER_URL}"
    labels:
      source: "${HOSTNAME}"
    encoding:
      codec: json
  to-mimir:
    type: prometheus_remote_write
    inputs:
      - from-metrics-prometheus-endpoint
      - from-postgresql
    endpoint: "${MIMIR_SERVER_URL}"