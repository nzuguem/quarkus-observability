# Log configuration
quarkus.log.level=INFO
quarkus.log.file.enable=true
%prod.quarkus.log.file.path=/tmp/observability-app/logs/application.log
quarkus.log.file.path=logs/application.log
quarkus.log.console.json=false
%prod.quarkus.log.console.json=true
quarkus.log.console.json.additional-field."env".value=${quarkus.profile}
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

# Datasource
%dev.quarkus.hibernate-orm.log.sql=true
quarkus.datasource.db-kind = postgresql

# Micrometer OTLP registry
## Please note that the ${quarkus.otel-collector.url} value is generated by quarkus when it starts the Grafana OTel LGTM Dev Resource.
quarkus.micrometer.export.otlp.url=http://${otel-collector.url}/v1/metrics

# OpenTelemetry
quarkus.otel.logs.enabled=true
quarkus.otel.exporter.otlp.protocol=http/protobuf
quarkus.otel.exporter.otlp.endpoint=http://${otel-collector.url}
quarkus.datasource.jdbc.telemetry=true

# RestClient
quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG
quarkus.rest-client.logging.scope=all
quarkus.rest-client.persons-random-api.url=http://localhost:3001
quarkus.rest-client.persons-random-api.scope=jakarta.inject.Singleton
%dev.quarkus.datasource.dev-ui.allow-sql=true
